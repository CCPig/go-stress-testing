// Package Base comment
// This file was generated by ksf2go 1.3.20
// Generated from PermControl.ksf
package Base

import (
	"fmt"

	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// UserPermission struct implement
type UserPermission struct {
	User   string `json:"user"`
	Domain string `json:"domain"`
	Objt   string `json:"objt"`
	Act    string `json:"act"`
}

func (st *UserPermission) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UserPermission) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Domain, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Objt, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Act, 3, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UserPermission) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UserPermission, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UserPermission) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Domain, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Objt, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Act, 3)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *UserPermission) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// RolePermission struct implement
type RolePermission struct {
	Role   string `json:"role"`
	Domain string `json:"domain"`
	Objt   string `json:"objt"`
	Act    string `json:"act"`
}

func (st *RolePermission) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *RolePermission) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Role, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Domain, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Objt, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Act, 3, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *RolePermission) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RolePermission, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *RolePermission) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Role, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Domain, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Objt, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Act, 3)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *RolePermission) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// RoleInherit struct implement
type RoleInherit struct {
	Role    string `json:"role"`
	Domain  string `json:"domain"`
	Inherit string `json:"inherit"`
}

func (st *RoleInherit) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *RoleInherit) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Role, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Domain, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Inherit, 2, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *RoleInherit) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RoleInherit, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *RoleInherit) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Role, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Domain, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Inherit, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *RoleInherit) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// UserRoles struct implement
type UserRoles struct {
	User   string   `json:"user"`
	Domain string   `json:"domain"`
	Roles  []string `json:"roles"`
}

func (st *UserRoles) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UserRoles) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.User, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Domain, 1, false)
	if err != nil {
		return err
	}

	have, ty, err = readBuf.SkipToNoCheck(2, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Roles = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = readBuf.ReadString(&st.Roles[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UserRoles) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UserRoles, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UserRoles) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.User, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Domain, 1)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.LIST, 2)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Roles)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Roles {

		err = buf.WriteString(v, 0)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *UserRoles) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
