// Package Taurus comment
// This file was generated by ksf2go 1.3.21
// Generated from TaurusAccessObj.ksf
package Taurus

import (
	"fmt"

	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// UuidRefresh struct implement
type UuidRefresh struct {
	Uuid    string `json:"uuid"`
	Refresh string `json:"refresh"`
}

func (st *UuidRefresh) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UuidRefresh) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Refresh, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UuidRefresh) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UuidRefresh, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UuidRefresh) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Refresh, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *UuidRefresh) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// UuidQuick struct implement
type UuidQuick struct {
	Uuid  string `json:"uuid"`
	Quick string `json:"quick"`
}

func (st *UuidQuick) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *UuidQuick) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Uuid, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Quick, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *UuidQuick) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require UuidQuick, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *UuidQuick) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Uuid, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Quick, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *UuidQuick) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// AccessBaseStatus struct implement
type AccessBaseStatus struct {
	Host        string  `json:"host"`
	Port        int32   `json:"port"`
	Weight      float64 `json:"weight"`
	Unit_visit  int32   `json:"unit_visit"`
	Arrive_time int64   `json:"arrive_time"`
}

func (st *AccessBaseStatus) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *AccessBaseStatus) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Host, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Port, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadFloat64(&st.Weight, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Unit_visit, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt64(&st.Arrive_time, 4, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *AccessBaseStatus) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require AccessBaseStatus, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *AccessBaseStatus) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Host, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Port, 1)
	if err != nil {
		return err
	}

	err = buf.WriteFloat64(st.Weight, 2)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Unit_visit, 3)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.Arrive_time, 4)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *AccessBaseStatus) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetAccessStatusReq struct implement
type GetAccessStatusReq struct {
	Only_base bool `json:"only_base"`
}

func (st *GetAccessStatusReq) ResetDefault() {
	st.Only_base = true
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetAccessStatusReq) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadBool(&st.Only_base, 0, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetAccessStatusReq) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetAccessStatusReq, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetAccessStatusReq) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteBool(st.Only_base, 0)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *GetAccessStatusReq) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// GetAccessStatusRsp struct implement
type GetAccessStatusRsp struct {
	Base    AccessBaseStatus  `json:"base"`
	Extends map[string]string `json:"extends"`
}

func (st *GetAccessStatusRsp) ResetDefault() {
	st.Base.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *GetAccessStatusRsp) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = st.Base.ReadBlock(readBuf, 0, false)
	if err != nil {
		return err
	}

	have, err = readBuf.SkipTo(codec.MAP, 1, false)
	if err != nil {
		return err
	}

	if have {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Extends = make(map[string]string)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 string

			err = readBuf.ReadString(&k0, 0, false)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&v0, 1, false)
			if err != nil {
				return err
			}

			st.Extends[k0] = v0
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *GetAccessStatusRsp) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require GetAccessStatusRsp, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *GetAccessStatusRsp) WriteTo(buf *codec.Buffer) (err error) {

	err = st.Base.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.MAP, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Extends)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.Extends {

		err = buf.WriteString(k1, 0)
		if err != nil {
			return err
		}

		err = buf.WriteString(v1, 1)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *GetAccessStatusRsp) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// WSInit struct implement
type WSInit struct {
	Wsid string `json:"wsid"`
	Ret  Result `json:"ret"`
}

func (st *WSInit) ResetDefault() {
	st.Ret.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *WSInit) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Wsid, 0, false)
	if err != nil {
		return err
	}

	err = st.Ret.ReadBlock(readBuf, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *WSInit) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require WSInit, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *WSInit) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Wsid, 0)
	if err != nil {
		return err
	}

	err = st.Ret.WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *WSInit) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
