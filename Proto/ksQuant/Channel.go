// Package ksQuant comment
// This file was generated by ksf2go 1.3.20
// Generated from Channel.ksf
package ksQuant

import (
	"fmt"

	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// ChannelProfile struct implement
type ChannelProfile struct {
	Name string `json:"name"`
}

func (st *ChannelProfile) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *ChannelProfile) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Name, 1, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *ChannelProfile) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ChannelProfile, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *ChannelProfile) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Name, 1)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *ChannelProfile) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// ChannelConfig struct implement
type ChannelConfig struct {
	Suffix  string `json:"suffix"`
	Context string `json:"context"`
}

func (st *ChannelConfig) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *ChannelConfig) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Suffix, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Context, 2, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *ChannelConfig) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ChannelConfig, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *ChannelConfig) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Suffix, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Context, 2)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *ChannelConfig) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// ChannelPermission struct implement
type ChannelPermission struct {
	Enable_tables   []string          `json:"enable_tables"`
	Deadline        int64             `json:"deadline"`
	Source_id       string            `json:"source_id"`
	Max_data_query  int64             `json:"max_data_query"`
	Max_user_number int32             `json:"max_user_number"`
	Web_config      map[string]string `json:"web_config"`
}

func (st *ChannelPermission) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *ChannelPermission) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	have, ty, err = readBuf.SkipToNoCheck(1, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Enable_tables = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = readBuf.ReadString(&st.Enable_tables[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = readBuf.ReadInt64(&st.Deadline, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Source_id, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt64(&st.Max_data_query, 4, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Max_user_number, 5, false)
	if err != nil {
		return err
	}

	have, err = readBuf.SkipTo(codec.MAP, 6, false)
	if err != nil {
		return err
	}

	if have {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Web_config = make(map[string]string)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {
			var k1 string
			var v1 string

			err = readBuf.ReadString(&k1, 0, false)
			if err != nil {
				return err
			}

			err = readBuf.ReadString(&v1, 1, false)
			if err != nil {
				return err
			}

			st.Web_config[k1] = v1
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *ChannelPermission) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require ChannelPermission, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *ChannelPermission) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteHead(codec.LIST, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Enable_tables)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Enable_tables {

		err = buf.WriteString(v, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteInt64(st.Deadline, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Source_id, 3)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.Max_data_query, 4)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Max_user_number, 5)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.MAP, 6)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Web_config)), 0)
	if err != nil {
		return err
	}

	for k2, v2 := range st.Web_config {

		err = buf.WriteString(k2, 0)
		if err != nil {
			return err
		}

		err = buf.WriteString(v2, 1)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *ChannelPermission) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// Channel struct implement
type Channel struct {
	Id         string                   `json:"id"`
	Profile    ChannelProfile           `json:"profile"`
	Tmpl       ChannelConfig            `json:"tmpl"`
	Permission ChannelPermission        `json:"permission"`
	Configs    map[string]ChannelConfig `json:"configs"`
}

func (st *Channel) ResetDefault() {
	st.Profile.ResetDefault()
	st.Tmpl.ResetDefault()
	st.Permission.ResetDefault()
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Channel) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = st.Profile.ReadBlock(readBuf, 1, false)
	if err != nil {
		return err
	}

	err = st.Tmpl.ReadBlock(readBuf, 2, false)
	if err != nil {
		return err
	}

	err = st.Permission.ReadBlock(readBuf, 3, false)
	if err != nil {
		return err
	}

	have, err = readBuf.SkipTo(codec.MAP, 4, false)
	if err != nil {
		return err
	}

	if have {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Configs = make(map[string]ChannelConfig)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 ChannelConfig

			err = readBuf.ReadString(&k0, 0, false)
			if err != nil {
				return err
			}

			err = v0.ReadBlock(readBuf, 1, false)
			if err != nil {
				return err
			}

			st.Configs[k0] = v0
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Channel) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Channel, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Channel) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Id, 0)
	if err != nil {
		return err
	}

	err = st.Profile.WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	err = st.Tmpl.WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	err = st.Permission.WriteBlock(buf, 3)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.MAP, 4)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Configs)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.Configs {

		err = buf.WriteString(k1, 0)
		if err != nil {
			return err
		}

		err = v1.WriteBlock(buf, 1)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *Channel) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
