// Package ksQuant comment
// This file was generated by ksf2go 1.3.20
// Generated from VTAccount.ksf
package ksQuant

import (
	"fmt"

	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// SubAccount struct implement
type SubAccount struct {
	Id           string  `json:"id"`
	Name         string  `json:"name"`
	Cash         float64 `json:"cash"`
	Main_account string  `json:"main_account"`
}

func (st *SubAccount) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *SubAccount) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Name, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadFloat64(&st.Cash, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Main_account, 3, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *SubAccount) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require SubAccount, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *SubAccount) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Id, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Name, 1)
	if err != nil {
		return err
	}

	err = buf.WriteFloat64(st.Cash, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Main_account, 3)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *SubAccount) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}

// MainAccount struct implement
type MainAccount struct {
	Id          string                `json:"id"`
	Password    string                `json:"password"`
	Name        string                `json:"name"`
	Type        int32                 `json:"type"`
	Cash        float64               `json:"cash"`
	Available   float64               `json:"available"`
	Sub_account map[string]SubAccount `json:"sub_account"`
}

func (st *MainAccount) ResetDefault() {
}

// ReadFrom reads  from readBuf and put into struct.
func (st *MainAccount) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Password, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Name, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Type, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadFloat64(&st.Cash, 4, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadFloat64(&st.Available, 5, false)
	if err != nil {
		return err
	}

	have, err = readBuf.SkipTo(codec.MAP, 6, false)
	if err != nil {
		return err
	}

	if have {
		err = readBuf.ReadInt32(&length, 0, true)
		if err != nil {
			return err
		}

		st.Sub_account = make(map[string]SubAccount)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {
			var k0 string
			var v0 SubAccount

			err = readBuf.ReadString(&k0, 0, false)
			if err != nil {
				return err
			}

			err = v0.ReadBlock(readBuf, 1, false)
			if err != nil {
				return err
			}

			st.Sub_account[k0] = v0
		}
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *MainAccount) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require MainAccount, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *MainAccount) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Id, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Password, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Name, 2)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Type, 3)
	if err != nil {
		return err
	}

	err = buf.WriteFloat64(st.Cash, 4)
	if err != nil {
		return err
	}

	err = buf.WriteFloat64(st.Available, 5)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.MAP, 6)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Sub_account)), 0)
	if err != nil {
		return err
	}

	for k1, v1 := range st.Sub_account {

		err = buf.WriteString(k1, 0)
		if err != nil {
			return err
		}

		err = v1.WriteBlock(buf, 1)
		if err != nil {
			return err
		}

	}

	return err
}

// WriteBlock encode struct
func (st *MainAccount) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
