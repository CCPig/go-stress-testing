// Package ksQuant comment
// This file was generated by ksf2go 1.3.20
// Generated from Publish.ksf
package ksQuant

import (
	"fmt"

	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// QuantPublish struct implement
type QuantPublish struct {
	Trigger_person string `json:"trigger_person"`
	Auditor        string `json:"auditor"`
	Upload_time    int64  `json:"upload_time"`
	Audit_time     int64  `json:"audit_time"`
	Server_tag     string `json:"server_tag"`
	Sdk_tag        string `json:"sdk_tag"`
	Download       string `json:"download"`
	Channle_id     string `json:"channle_id"`
	Is_approved    bool   `json:"is_approved"`
	Platform       string `json:"platform"`
}

func (st *QuantPublish) ResetDefault() {
	st.Is_approved = false
}

// ReadFrom reads  from readBuf and put into struct.
func (st *QuantPublish) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	err = readBuf.ReadString(&st.Trigger_person, 0, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Auditor, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt64(&st.Upload_time, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt64(&st.Audit_time, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Server_tag, 4, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Sdk_tag, 5, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Download, 6, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Channle_id, 7, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadBool(&st.Is_approved, 8, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Platform, 9, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *QuantPublish) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require QuantPublish, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *QuantPublish) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteString(st.Trigger_person, 0)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Auditor, 1)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.Upload_time, 2)
	if err != nil {
		return err
	}

	err = buf.WriteInt64(st.Audit_time, 3)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Server_tag, 4)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Sdk_tag, 5)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Download, 6)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Channle_id, 7)
	if err != nil {
		return err
	}

	err = buf.WriteBool(st.Is_approved, 8)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Platform, 9)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *QuantPublish) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
