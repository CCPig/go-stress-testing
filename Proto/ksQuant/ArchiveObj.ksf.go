// Package ksQuant comment
// This file was generated by ksf2go 1.3.20
// Generated from ArchiveObj.ksf
package ksQuant

import (
	"bytes"
	"context"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"go.k8sf.cloud/go/KsfGo/ksf"
	m "go.k8sf.cloud/go/KsfGo/ksf/model"
	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
	"go.k8sf.cloud/go/KsfGo/ksf/protocol/kup"
	"go.k8sf.cloud/go/KsfGo/ksf/protocol/res/basef"
	"go.k8sf.cloud/go/KsfGo/ksf/protocol/res/requestf"
	"go.k8sf.cloud/go/KsfGo/ksf/util/current"
	"go.k8sf.cloud/go/KsfGo/ksf/util/tools"
	"go.k8sf.cloud/go/KsfGo/ksf/util/trace"
	"net"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = codec.FromInt8
	_ = unsafe.Pointer(nil)
	_ = bytes.ErrTooLarge
	_ = net.UDPConn{}
)

// ArchiveObj struct
type ArchiveObj struct {
	servant m.Servant
}

// StartAsyncLoadAllData is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) StartAsyncLoadAllData(req *StartAsyncLoadAllDataReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "StartAsyncLoadAllData", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// StartAsyncLoadAllDataWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) StartAsyncLoadAllDataWithContext(ksfCtx context.Context, req *StartAsyncLoadAllDataReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "StartAsyncLoadAllData", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "StartAsyncLoadAllData", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "StartAsyncLoadAllData", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// StartAsyncLoadAllDataOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) StartAsyncLoadAllDataOneWayWithContext(ksfCtx context.Context, req *StartAsyncLoadAllDataReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "StartAsyncLoadAllData", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// StopAsyncLoadAllData is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) StopAsyncLoadAllData(opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "StopAsyncLoadAllData", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// StopAsyncLoadAllDataWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) StopAsyncLoadAllDataWithContext(ksfCtx context.Context, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "StopAsyncLoadAllData", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "StopAsyncLoadAllData", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "StopAsyncLoadAllData", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// StopAsyncLoadAllDataOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) StopAsyncLoadAllDataOneWayWithContext(ksfCtx context.Context, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "StopAsyncLoadAllData", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteTickPack is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteTickPack(req *GetQuoteTickPackReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetQuoteTickPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteTickPackWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteTickPackWithContext(ksfCtx context.Context, req *GetQuoteTickPackReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetQuoteTickPack", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetQuoteTickPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetQuoteTickPack", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteTickPackOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteTickPackOneWayWithContext(ksfCtx context.Context, req *GetQuoteTickPackReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetQuoteTickPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteBarPack is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteBarPack(req *GetQuoteBarPackReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetQuoteBarPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteBarPackWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteBarPackWithContext(ksfCtx context.Context, req *GetQuoteBarPackReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetQuoteBarPack", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetQuoteBarPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetQuoteBarPack", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteBarPackOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteBarPackOneWayWithContext(ksfCtx context.Context, req *GetQuoteBarPackReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetQuoteBarPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteDailyStaticPack is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteDailyStaticPack(req *GetQuoteDailyStaticReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetQuoteDailyStaticPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteDailyStaticPackWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteDailyStaticPackWithContext(ksfCtx context.Context, req *GetQuoteDailyStaticReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetQuoteDailyStaticPack", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetQuoteDailyStaticPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetQuoteDailyStaticPack", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetQuoteDailyStaticPackOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetQuoteDailyStaticPackOneWayWithContext(ksfCtx context.Context, req *GetQuoteDailyStaticReq, rsp *GetQuotePackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetQuoteDailyStaticPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBasicPack is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBasicPack(req *GetBasicPackReq, rsp *GetBasicPackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetBasicPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBasicPackWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBasicPackWithContext(ksfCtx context.Context, req *GetBasicPackReq, rsp *GetBasicPackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetBasicPack", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetBasicPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetBasicPack", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBasicPackOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBasicPackOneWayWithContext(ksfCtx context.Context, req *GetBasicPackReq, rsp *GetBasicPackRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetBasicPack", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBifrostBinlog is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBifrostBinlog(req *GetBifrostBinlogReq, rsp *GetBifrostBinlogRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetBifrostBinlog", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBifrostBinlogWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBifrostBinlogWithContext(ksfCtx context.Context, req *GetBifrostBinlogReq, rsp *GetBifrostBinlogRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetBifrostBinlog", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetBifrostBinlog", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetBifrostBinlog", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBifrostBinlogOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBifrostBinlogOneWayWithContext(ksfCtx context.Context, req *GetBifrostBinlogReq, rsp *GetBifrostBinlogRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetBifrostBinlog", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// QuoteChMerge is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) QuoteChMerge(req *QuoteChMergeReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "QuoteChMerge", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// QuoteChMergeWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) QuoteChMergeWithContext(ksfCtx context.Context, req *QuoteChMergeReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "QuoteChMerge", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "QuoteChMerge", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "QuoteChMerge", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// QuoteChMergeOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) QuoteChMergeOneWayWithContext(ksfCtx context.Context, req *QuoteChMergeReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "QuoteChMerge", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NotifyMonitorInfo is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NotifyMonitorInfo(req *NotifyMonitorInfoReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "NotifyMonitorInfo", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NotifyMonitorInfoWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NotifyMonitorInfoWithContext(ksfCtx context.Context, req *NotifyMonitorInfoReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NotifyMonitorInfo", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "NotifyMonitorInfo", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NotifyMonitorInfo", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NotifyMonitorInfoOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NotifyMonitorInfoOneWayWithContext(ksfCtx context.Context, req *NotifyMonitorInfoReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "NotifyMonitorInfo", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NotifyPredilectionInfo is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NotifyPredilectionInfo(req *NotifyPredilectionInfoReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "NotifyPredilectionInfo", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NotifyPredilectionInfoWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NotifyPredilectionInfoWithContext(ksfCtx context.Context, req *NotifyPredilectionInfoReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NotifyPredilectionInfo", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "NotifyPredilectionInfo", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NotifyPredilectionInfo", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NotifyPredilectionInfoOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NotifyPredilectionInfoOneWayWithContext(ksfCtx context.Context, req *NotifyPredilectionInfoReq, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "NotifyPredilectionInfo", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBar is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBar(req *GetBarReq, rsp *GetBarRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetBar", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBarWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBarWithContext(ksfCtx context.Context, req *GetBarReq, rsp *GetBarRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetBar", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetBar", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetBar", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetBarOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetBarOneWayWithContext(ksfCtx context.Context, req *GetBarReq, rsp *GetBarRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetBar", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTick is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTick(req *GetTickReq, rsp *GetTickRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetTick", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTickWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTickWithContext(ksfCtx context.Context, req *GetTickReq, rsp *GetTickRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetTick", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetTick", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetTick", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTickOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTickOneWayWithContext(ksfCtx context.Context, req *GetTickReq, rsp *GetTickRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetTick", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetCurInstruments is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetCurInstruments(rsp *GetCurInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetCurInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 1, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetCurInstrumentsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetCurInstrumentsWithContext(ksfCtx context.Context, rsp *GetCurInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetCurInstruments", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetCurInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 1, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetCurInstruments", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetCurInstrumentsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetCurInstrumentsOneWayWithContext(ksfCtx context.Context, rsp *GetCurInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetCurInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetHisInstruments is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetHisInstruments(rsp *GetHisInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetHisInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 1, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetHisInstrumentsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetHisInstrumentsWithContext(ksfCtx context.Context, rsp *GetHisInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetHisInstruments", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetHisInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 1, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetHisInstruments", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetHisInstrumentsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetHisInstrumentsOneWayWithContext(ksfCtx context.Context, rsp *GetHisInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetHisInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetRefMarkets is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetRefMarkets(req *GetRefMarketsReq, rsp *GetRefMarketsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetRefMarkets", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetRefMarketsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetRefMarketsWithContext(ksfCtx context.Context, req *GetRefMarketsReq, rsp *GetRefMarketsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetRefMarkets", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetRefMarkets", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetRefMarkets", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetRefMarketsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetRefMarketsOneWayWithContext(ksfCtx context.Context, req *GetRefMarketsReq, rsp *GetRefMarketsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetRefMarkets", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstrumentMarket is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstrumentMarket(req *GetInstrumentMarketReq, rsp *GetInstrumentMarketRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstrumentMarket", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstrumentMarketWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstrumentMarketWithContext(ksfCtx context.Context, req *GetInstrumentMarketReq, rsp *GetInstrumentMarketRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstrumentMarket", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstrumentMarket", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstrumentMarket", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstrumentMarketOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstrumentMarketOneWayWithContext(ksfCtx context.Context, req *GetInstrumentMarketReq, rsp *GetInstrumentMarketRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetInstrumentMarket", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetExchangeId is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetExchangeId(req *GetExchangeIdReq, rsp *GetExchangeIdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetExchangeId", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetExchangeIdWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetExchangeIdWithContext(ksfCtx context.Context, req *GetExchangeIdReq, rsp *GetExchangeIdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetExchangeId", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetExchangeId", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetExchangeId", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetExchangeIdOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetExchangeIdOneWayWithContext(ksfCtx context.Context, req *GetExchangeIdReq, rsp *GetExchangeIdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetExchangeId", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstVolMulti is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstVolMulti(req *GetInstVolMultiReq, rsp *GetInstVolMultiRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstVolMulti", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstVolMultiWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstVolMultiWithContext(ksfCtx context.Context, req *GetInstVolMultiReq, rsp *GetInstVolMultiRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstVolMulti", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstVolMulti", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstVolMulti", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstVolMultiOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstVolMultiOneWayWithContext(ksfCtx context.Context, req *GetInstVolMultiReq, rsp *GetInstVolMultiRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetInstVolMulti", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTradingMarkets is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTradingMarkets(req *GetTradingMarketsReq, rsp *GetTradingMarketsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetTradingMarkets", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTradingMarketsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTradingMarketsWithContext(ksfCtx context.Context, req *GetTradingMarketsReq, rsp *GetTradingMarketsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetTradingMarkets", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetTradingMarkets", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetTradingMarkets", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTradingMarketsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTradingMarketsOneWayWithContext(ksfCtx context.Context, req *GetTradingMarketsReq, rsp *GetTradingMarketsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetTradingMarkets", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// TradeDates is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) TradeDates(req *TradeDatesReq, rsp *TradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "TradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// TradeDatesWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) TradeDatesWithContext(ksfCtx context.Context, req *TradeDatesReq, rsp *TradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "TradeDates", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "TradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "TradeDates", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// TradeDatesOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) TradeDatesOneWayWithContext(ksfCtx context.Context, req *TradeDatesReq, rsp *TradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "TradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// TradeDateInterval is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) TradeDateInterval(req *TradeDateIntervalReq, rsp *TradeDateIntervalRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "TradeDateInterval", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// TradeDateIntervalWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) TradeDateIntervalWithContext(ksfCtx context.Context, req *TradeDateIntervalReq, rsp *TradeDateIntervalRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "TradeDateInterval", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "TradeDateInterval", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "TradeDateInterval", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// TradeDateIntervalOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) TradeDateIntervalOneWayWithContext(ksfCtx context.Context, req *TradeDateIntervalReq, rsp *TradeDateIntervalRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "TradeDateInterval", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// PrevTradeDates is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) PrevTradeDates(req *PrevTradeDatesReq, rsp *PrevTradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "PrevTradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// PrevTradeDatesWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) PrevTradeDatesWithContext(ksfCtx context.Context, req *PrevTradeDatesReq, rsp *PrevTradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "PrevTradeDates", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "PrevTradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "PrevTradeDates", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// PrevTradeDatesOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) PrevTradeDatesOneWayWithContext(ksfCtx context.Context, req *PrevTradeDatesReq, rsp *PrevTradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "PrevTradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextTradeDates is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextTradeDates(req *NextTradeDatesReq, rsp *NextTradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextTradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextTradeDatesWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextTradeDatesWithContext(ksfCtx context.Context, req *NextTradeDatesReq, rsp *NextTradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextTradeDates", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextTradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextTradeDates", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextTradeDatesOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextTradeDatesOneWayWithContext(ksfCtx context.Context, req *NextTradeDatesReq, rsp *NextTradeDatesRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "NextTradeDates", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// LastTradeDate is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) LastTradeDate(req *LastTradeDateReq, rsp *LastTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "LastTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// LastTradeDateWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) LastTradeDateWithContext(ksfCtx context.Context, req *LastTradeDateReq, rsp *LastTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "LastTradeDate", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "LastTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "LastTradeDate", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// LastTradeDateOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) LastTradeDateOneWayWithContext(ksfCtx context.Context, req *LastTradeDateReq, rsp *LastTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "LastTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextTradeDate is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextTradeDate(req *NextTradeDateReq, rsp *NextTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextTradeDateWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextTradeDateWithContext(ksfCtx context.Context, req *NextTradeDateReq, rsp *NextTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextTradeDate", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextTradeDate", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextTradeDateOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextTradeDateOneWayWithContext(ksfCtx context.Context, req *NextTradeDateReq, rsp *NextTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "NextTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsTradeDate is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsTradeDate(req *IsTradeDateReq, rsp *IsTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsTradeDateWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsTradeDateWithContext(ksfCtx context.Context, req *IsTradeDateReq, rsp *IsTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsTradeDate", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsTradeDate", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsTradeDateOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsTradeDateOneWayWithContext(ksfCtx context.Context, req *IsTradeDateReq, rsp *IsTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsTradeTime is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsTradeTime(req *IsTradeTimeReq, rsp *IsTradeTimeRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsTradeTime", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsTradeTimeWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsTradeTimeWithContext(ksfCtx context.Context, req *IsTradeTimeReq, rsp *IsTradeTimeRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsTradeTime", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsTradeTime", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsTradeTime", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsTradeTimeOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsTradeTimeOneWayWithContext(ksfCtx context.Context, req *IsTradeTimeReq, rsp *IsTradeTimeRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsTradeTime", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTradeDate is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTradeDate(req *GetTradeDateReq, rsp *GetTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTradeDateWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTradeDateWithContext(ksfCtx context.Context, req *GetTradeDateReq, rsp *GetTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetTradeDate", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetTradeDate", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetTradeDateOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetTradeDateOneWayWithContext(ksfCtx context.Context, req *GetTradeDateReq, rsp *GetTradeDateRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetTradeDate", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextCloseMs is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextCloseMs(req *NextCloseMsReq, rsp *NextCloseMsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextCloseMs", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextCloseMsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextCloseMsWithContext(ksfCtx context.Context, req *NextCloseMsReq, rsp *NextCloseMsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextCloseMs", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextCloseMs", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextCloseMs", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextCloseMsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextCloseMsOneWayWithContext(ksfCtx context.Context, req *NextCloseMsReq, rsp *NextCloseMsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "NextCloseMs", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextStartMs is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextStartMs(req *NextStartMsReq, rsp *NextStartMsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextStartMs", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextStartMsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextStartMsWithContext(ksfCtx context.Context, req *NextStartMsReq, rsp *NextStartMsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextStartMs", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "NextStartMs", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "NextStartMs", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// NextStartMsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) NextStartMsOneWayWithContext(ksfCtx context.Context, req *NextStartMsReq, rsp *NextStartMsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "NextStartMs", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstrument is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstrument(req *GetInstrumentReq, rsp *GetInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstrumentWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstrumentWithContext(ksfCtx context.Context, req *GetInstrumentReq, rsp *GetInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstrument", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstrument", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstrumentOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstrumentOneWayWithContext(ksfCtx context.Context, req *GetInstrumentReq, rsp *GetInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetCfInstrument is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetCfInstrument(req *GetCfInstrumentReq, rsp *GetCfInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetCfInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetCfInstrumentWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetCfInstrumentWithContext(ksfCtx context.Context, req *GetCfInstrumentReq, rsp *GetCfInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetCfInstrument", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetCfInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetCfInstrument", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetCfInstrumentOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetCfInstrumentOneWayWithContext(ksfCtx context.Context, req *GetCfInstrumentReq, rsp *GetCfInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetCfInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetPrdInstrument is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetPrdInstrument(req *GetPrdInstrumentReq, rsp *GetPrdInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetPrdInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetPrdInstrumentWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetPrdInstrumentWithContext(ksfCtx context.Context, req *GetPrdInstrumentReq, rsp *GetPrdInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetPrdInstrument", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetPrdInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetPrdInstrument", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetPrdInstrumentOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetPrdInstrumentOneWayWithContext(ksfCtx context.Context, req *GetPrdInstrumentReq, rsp *GetPrdInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetPrdInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstPrdId is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstPrdId(req *GetInstPrdIdReq, rsp *GetInstPrdIdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstPrdId", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstPrdIdWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstPrdIdWithContext(ksfCtx context.Context, req *GetInstPrdIdReq, rsp *GetInstPrdIdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstPrdId", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetInstPrdId", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetInstPrdId", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetInstPrdIdOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetInstPrdIdOneWayWithContext(ksfCtx context.Context, req *GetInstPrdIdReq, rsp *GetInstPrdIdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetInstPrdId", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsSuspend is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsSuspend(req *IsSuspendReq, rsp *IsSuspendRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsSuspend", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsSuspendWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsSuspendWithContext(ksfCtx context.Context, req *IsSuspendReq, rsp *IsSuspendRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsSuspend", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsSuspend", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsSuspend", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsSuspendOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsSuspendOneWayWithContext(ksfCtx context.Context, req *IsSuspendReq, rsp *IsSuspendRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsSuspend", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsST is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsST(req *IsSTReq, rsp *IsSTRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsST", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsSTWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsSTWithContext(ksfCtx context.Context, req *IsSTReq, rsp *IsSTRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsST", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsST", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsST", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsSTOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsSTOneWayWithContext(ksfCtx context.Context, req *IsSTReq, rsp *IsSTRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsST", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsListed is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsListed(req *IsListedReq, rsp *IsListedRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsListed", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsListedWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsListedWithContext(ksfCtx context.Context, req *IsListedReq, rsp *IsListedRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsListed", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsListed", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsListed", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsListedOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsListedOneWayWithContext(ksfCtx context.Context, req *IsListedReq, rsp *IsListedRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsListed", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetContinuousInstrument is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetContinuousInstrument(req *GetContinuousInstrumentReq, rsp *GetContinuousInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetContinuousInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetContinuousInstrumentWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetContinuousInstrumentWithContext(ksfCtx context.Context, req *GetContinuousInstrumentReq, rsp *GetContinuousInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetContinuousInstrument", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetContinuousInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetContinuousInstrument", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetContinuousInstrumentOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetContinuousInstrumentOneWayWithContext(ksfCtx context.Context, req *GetContinuousInstrumentReq, rsp *GetContinuousInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetContinuousInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetConstituentInstruments is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetConstituentInstruments(req *GetConstituentInstrumentsReq, rsp *GetConstituentInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetConstituentInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetConstituentInstrumentsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetConstituentInstrumentsWithContext(ksfCtx context.Context, req *GetConstituentInstrumentsReq, rsp *GetConstituentInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetConstituentInstruments", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetConstituentInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetConstituentInstruments", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetConstituentInstrumentsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetConstituentInstrumentsOneWayWithContext(ksfCtx context.Context, req *GetConstituentInstrumentsReq, rsp *GetConstituentInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetConstituentInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetAppointedInstruments is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetAppointedInstruments(req *GetAppointedInstrumentsReq, rsp *GetAppointedInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetAppointedInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetAppointedInstrumentsWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetAppointedInstrumentsWithContext(ksfCtx context.Context, req *GetAppointedInstrumentsReq, rsp *GetAppointedInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetAppointedInstruments", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetAppointedInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetAppointedInstruments", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetAppointedInstrumentsOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetAppointedInstrumentsOneWayWithContext(ksfCtx context.Context, req *GetAppointedInstrumentsReq, rsp *GetAppointedInstrumentsRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetAppointedInstruments", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsPrd is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsPrd(req *IsPrdReq, rsp *IsPrdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsPrd", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsPrdWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsPrdWithContext(ksfCtx context.Context, req *IsPrdReq, rsp *IsPrdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsPrd", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsPrd", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsPrd", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsPrdOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsPrdOneWayWithContext(ksfCtx context.Context, req *IsPrdReq, rsp *IsPrdRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsPrd", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsCf is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsCf(req *IsCfReq, rsp *IsCfRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsCf", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsCfWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsCfWithContext(ksfCtx context.Context, req *IsCfReq, rsp *IsCfRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsCf", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsCf", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsCf", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsCfOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsCfOneWayWithContext(ksfCtx context.Context, req *IsCfReq, rsp *IsCfRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsCf", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsMarket is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsMarket(req *IsMarketReq, rsp *IsMarketRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsMarket", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsMarketWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsMarketWithContext(ksfCtx context.Context, req *IsMarketReq, rsp *IsMarketRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsMarket", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "IsMarket", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "IsMarket", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// IsMarketOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) IsMarketOneWayWithContext(ksfCtx context.Context, req *IsMarketReq, rsp *IsMarketRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "IsMarket", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetSWIndexInstrument is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetSWIndexInstrument(req *GetSWIndexInstrumentReq, rsp *GetSWIndexInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}
	ksfResp := new(requestf.ResponsePacket)
	ksfCtx := context.Background()

	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetSWIndexInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetSWIndexInstrumentWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetSWIndexInstrumentWithContext(ksfCtx context.Context, req *GetSWIndexInstrumentReq, rsp *GetSWIndexInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	traceData, ok := current.GetTraceData(ksfCtx)
	if ok && traceData.TraceCall {
		traceData.NewSpan()
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCS, uint(buf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value["req"] = req
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCS), trace.TraceAnnotationCS, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetSWIndexInstrument", 0, traceParam, "")
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 0, "GetSWIndexInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
	err = ret.ReadBlock(readBuf, 0, true)
	if err != nil {
		return ret, err
	}

	err = (*rsp).ReadBlock(readBuf, 2, true)
	if err != nil {
		return ret, err
	}

	if ok && traceData.TraceCall {
		var traceParam string
		traceParamFlag := traceData.NeedTraceParam(trace.EstCR, uint(readBuf.Len()))
		if traceParamFlag == trace.EnpNormal {
			value := map[string]interface{}{}
			value[""] = ret
			value["rsp"] = *rsp
			p, _ := json.Marshal(value)
			traceParam = string(p)
		} else if traceParamFlag == trace.EnpOverMaxLen {
			traceParam = "{\"trace_param_over_max_len\":true}"
		}
		ksf.Trace(traceData.GetTraceKey(trace.EstCR), trace.TraceAnnotationCR, ksf.GetClientConfig().ModuleName, obj.servant.Name(), "GetSWIndexInstrument", int(ksfResp.IRet), traceParam, "")
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// GetSWIndexInstrumentOneWayWithContext is the proxy function for the method defined in the ksf file, with the context
func (obj *ArchiveObj) GetSWIndexInstrumentOneWayWithContext(ksfCtx context.Context, req *GetSWIndexInstrumentReq, rsp *GetSWIndexInstrumentRsp, opts ...map[string]string) (ret Error, err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	buf := codec.NewBuffer()
	err = req.WriteBlock(buf, 1)
	if err != nil {
		return ret, err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return ret, err
	}

	var statusMap map[string]string
	var contextMap map[string]string
	if len(opts) == 1 {
		contextMap = opts[0]
	} else if len(opts) == 2 {
		contextMap = opts[0]
		statusMap = opts[1]
	}

	ksfResp := new(requestf.ResponsePacket)
	err = obj.servant.KsfInvoke(ksfCtx, 1, "GetSWIndexInstrument", buf.ToBytes(), statusMap, contextMap, ksfResp)
	if err != nil {
		return ret, err
	}

	if len(opts) == 1 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
	} else if len(opts) == 2 {
		for k := range contextMap {
			delete(contextMap, k)
		}
		for k, v := range ksfResp.Context {
			contextMap[k] = v
		}
		for k := range statusMap {
			delete(statusMap, k)
		}
		for k, v := range ksfResp.Status {
			statusMap[k] = v
		}
	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

// SetServant sets servant for the service.
func (obj *ArchiveObj) SetServant(servant m.Servant) {
	obj.servant = servant
}

// GetServant gets servant for the service.
func (obj *ArchiveObj) GetServant() (servant *m.Servant) {
	return &obj.servant
}

// SetOnConnectCallback
func (obj *ArchiveObj) SetOnConnectCallback(callback func(string)) {
	obj.servant.SetOnConnectCallback(callback)
}

// SetOnCloseCallback
func (obj *ArchiveObj) SetOnCloseCallback(callback func(string)) {
	obj.servant.SetOnCloseCallback(callback)
}

// SetKsfCallback
func (obj *ArchiveObj) SetKsfCallback(callback ArchiveObjKsfCallback) {
	var push ArchiveObjPushCallback
	push.Cb = callback
	obj.servant.SetKsfCallback(&push)
}

// SetPushCallback
func (obj *ArchiveObj) SetPushCallback(callback func([]byte)) {
	obj.servant.SetPushCallback(callback)
}
func (obj *ArchiveObj) req2Byte(rsp *requestf.ResponsePacket) []byte {
	req := requestf.RequestPacket{}
	req.IVersion = rsp.IVersion
	req.IRequestId = rsp.IRequestId
	req.IMessageType = rsp.IMessageType
	req.CPacketType = rsp.CPacketType
	req.Context = rsp.Context
	req.Status = rsp.Status
	req.SBuffer = rsp.SBuffer

	os := codec.NewBuffer()
	req.WriteTo(os)
	bs := os.ToBytes()
	sbuf := bytes.NewBuffer(nil)
	sbuf.Write(make([]byte, 4))
	sbuf.Write(bs)
	length := sbuf.Len()
	binary.BigEndian.PutUint32(sbuf.Bytes(), uint32(length))
	return sbuf.Bytes()
}

func (obj *ArchiveObj) rsp2Byte(rsp *requestf.ResponsePacket) []byte {
	if rsp.IVersion == basef.KUPVERSION {
		return obj.req2Byte(rsp)
	}
	os := codec.NewBuffer()
	rsp.WriteTo(os)
	bs := os.ToBytes()
	sbuf := bytes.NewBuffer(nil)
	sbuf.Write(make([]byte, 4))
	sbuf.Write(bs)
	length := sbuf.Len()
	binary.BigEndian.PutUint32(sbuf.Bytes(), uint32(length))
	return sbuf.Bytes()
}

// KsfPing
func (obj *ArchiveObj) KsfPing() {
	ksfCtx := context.Background()
	obj.servant.KsfPing(ksfCtx)
}

// KsfSetTimeout sets the timeout for the servant which is in ms.
func (obj *ArchiveObj) KsfSetTimeout(timeout int) {
	obj.servant.KsfSetTimeout(timeout)
}

// KsfSetVersion default as KSFVERSION,you can set JSONVERSION.
func (obj *ArchiveObj) KsfSetVersion(version int16) {
	obj.servant.KsfSetVersion(version)
}

// KsfSetProtocol sets the protocol for the servant.
func (obj *ArchiveObj) KsfSetProtocol(p m.Protocol) {
	obj.servant.KsfSetProtocol(p)
}

// AddServant adds servant  for the service.
func (obj *ArchiveObj) AddServant(imp ArchiveObjServant, servantObj string) {
	ksf.AddServant(obj, imp, servantObj)
}

// AddServantWithContext adds servant  for the service with context.
func (obj *ArchiveObj) AddServantWithContext(imp ArchiveObjServantWithContext, servantObj string) {
	ksf.AddServantWithContext(obj, imp, servantObj)
}

type ArchiveObjServant interface {
	StartAsyncLoadAllData(req *StartAsyncLoadAllDataReq) (ret Error, err error)
	StopAsyncLoadAllData() (ret Error, err error)
	GetQuoteTickPack(req *GetQuoteTickPackReq, rsp *GetQuotePackRsp) (ret Error, err error)
	GetQuoteBarPack(req *GetQuoteBarPackReq, rsp *GetQuotePackRsp) (ret Error, err error)
	GetQuoteDailyStaticPack(req *GetQuoteDailyStaticReq, rsp *GetQuotePackRsp) (ret Error, err error)
	GetBasicPack(req *GetBasicPackReq, rsp *GetBasicPackRsp) (ret Error, err error)
	GetBifrostBinlog(req *GetBifrostBinlogReq, rsp *GetBifrostBinlogRsp) (ret Error, err error)
	QuoteChMerge(req *QuoteChMergeReq) (ret Error, err error)
	NotifyMonitorInfo(req *NotifyMonitorInfoReq) (ret Error, err error)
	NotifyPredilectionInfo(req *NotifyPredilectionInfoReq) (ret Error, err error)
	GetBar(req *GetBarReq, rsp *GetBarRsp) (ret Error, err error)
	GetTick(req *GetTickReq, rsp *GetTickRsp) (ret Error, err error)
	GetCurInstruments(rsp *GetCurInstrumentsRsp) (ret Error, err error)
	GetHisInstruments(rsp *GetHisInstrumentsRsp) (ret Error, err error)
	GetRefMarkets(req *GetRefMarketsReq, rsp *GetRefMarketsRsp) (ret Error, err error)
	GetInstrumentMarket(req *GetInstrumentMarketReq, rsp *GetInstrumentMarketRsp) (ret Error, err error)
	GetExchangeId(req *GetExchangeIdReq, rsp *GetExchangeIdRsp) (ret Error, err error)
	GetInstVolMulti(req *GetInstVolMultiReq, rsp *GetInstVolMultiRsp) (ret Error, err error)
	GetTradingMarkets(req *GetTradingMarketsReq, rsp *GetTradingMarketsRsp) (ret Error, err error)
	TradeDates(req *TradeDatesReq, rsp *TradeDatesRsp) (ret Error, err error)
	TradeDateInterval(req *TradeDateIntervalReq, rsp *TradeDateIntervalRsp) (ret Error, err error)
	PrevTradeDates(req *PrevTradeDatesReq, rsp *PrevTradeDatesRsp) (ret Error, err error)
	NextTradeDates(req *NextTradeDatesReq, rsp *NextTradeDatesRsp) (ret Error, err error)
	LastTradeDate(req *LastTradeDateReq, rsp *LastTradeDateRsp) (ret Error, err error)
	NextTradeDate(req *NextTradeDateReq, rsp *NextTradeDateRsp) (ret Error, err error)
	IsTradeDate(req *IsTradeDateReq, rsp *IsTradeDateRsp) (ret Error, err error)
	IsTradeTime(req *IsTradeTimeReq, rsp *IsTradeTimeRsp) (ret Error, err error)
	GetTradeDate(req *GetTradeDateReq, rsp *GetTradeDateRsp) (ret Error, err error)
	NextCloseMs(req *NextCloseMsReq, rsp *NextCloseMsRsp) (ret Error, err error)
	NextStartMs(req *NextStartMsReq, rsp *NextStartMsRsp) (ret Error, err error)
	GetInstrument(req *GetInstrumentReq, rsp *GetInstrumentRsp) (ret Error, err error)
	GetCfInstrument(req *GetCfInstrumentReq, rsp *GetCfInstrumentRsp) (ret Error, err error)
	GetPrdInstrument(req *GetPrdInstrumentReq, rsp *GetPrdInstrumentRsp) (ret Error, err error)
	GetInstPrdId(req *GetInstPrdIdReq, rsp *GetInstPrdIdRsp) (ret Error, err error)
	IsSuspend(req *IsSuspendReq, rsp *IsSuspendRsp) (ret Error, err error)
	IsST(req *IsSTReq, rsp *IsSTRsp) (ret Error, err error)
	IsListed(req *IsListedReq, rsp *IsListedRsp) (ret Error, err error)
	GetContinuousInstrument(req *GetContinuousInstrumentReq, rsp *GetContinuousInstrumentRsp) (ret Error, err error)
	GetConstituentInstruments(req *GetConstituentInstrumentsReq, rsp *GetConstituentInstrumentsRsp) (ret Error, err error)
	GetAppointedInstruments(req *GetAppointedInstrumentsReq, rsp *GetAppointedInstrumentsRsp) (ret Error, err error)
	IsPrd(req *IsPrdReq, rsp *IsPrdRsp) (ret Error, err error)
	IsCf(req *IsCfReq, rsp *IsCfRsp) (ret Error, err error)
	IsMarket(req *IsMarketReq, rsp *IsMarketRsp) (ret Error, err error)
	GetSWIndexInstrument(req *GetSWIndexInstrumentReq, rsp *GetSWIndexInstrumentRsp) (ret Error, err error)
}
type ArchiveObjServantWithContext interface {
	StartAsyncLoadAllData(ksfCtx context.Context, req *StartAsyncLoadAllDataReq) (ret Error, err error)
	StopAsyncLoadAllData(ksfCtx context.Context) (ret Error, err error)
	GetQuoteTickPack(ksfCtx context.Context, req *GetQuoteTickPackReq, rsp *GetQuotePackRsp) (ret Error, err error)
	GetQuoteBarPack(ksfCtx context.Context, req *GetQuoteBarPackReq, rsp *GetQuotePackRsp) (ret Error, err error)
	GetQuoteDailyStaticPack(ksfCtx context.Context, req *GetQuoteDailyStaticReq, rsp *GetQuotePackRsp) (ret Error, err error)
	GetBasicPack(ksfCtx context.Context, req *GetBasicPackReq, rsp *GetBasicPackRsp) (ret Error, err error)
	GetBifrostBinlog(ksfCtx context.Context, req *GetBifrostBinlogReq, rsp *GetBifrostBinlogRsp) (ret Error, err error)
	QuoteChMerge(ksfCtx context.Context, req *QuoteChMergeReq) (ret Error, err error)
	NotifyMonitorInfo(ksfCtx context.Context, req *NotifyMonitorInfoReq) (ret Error, err error)
	NotifyPredilectionInfo(ksfCtx context.Context, req *NotifyPredilectionInfoReq) (ret Error, err error)
	GetBar(ksfCtx context.Context, req *GetBarReq, rsp *GetBarRsp) (ret Error, err error)
	GetTick(ksfCtx context.Context, req *GetTickReq, rsp *GetTickRsp) (ret Error, err error)
	GetCurInstruments(ksfCtx context.Context, rsp *GetCurInstrumentsRsp) (ret Error, err error)
	GetHisInstruments(ksfCtx context.Context, rsp *GetHisInstrumentsRsp) (ret Error, err error)
	GetRefMarkets(ksfCtx context.Context, req *GetRefMarketsReq, rsp *GetRefMarketsRsp) (ret Error, err error)
	GetInstrumentMarket(ksfCtx context.Context, req *GetInstrumentMarketReq, rsp *GetInstrumentMarketRsp) (ret Error, err error)
	GetExchangeId(ksfCtx context.Context, req *GetExchangeIdReq, rsp *GetExchangeIdRsp) (ret Error, err error)
	GetInstVolMulti(ksfCtx context.Context, req *GetInstVolMultiReq, rsp *GetInstVolMultiRsp) (ret Error, err error)
	GetTradingMarkets(ksfCtx context.Context, req *GetTradingMarketsReq, rsp *GetTradingMarketsRsp) (ret Error, err error)
	TradeDates(ksfCtx context.Context, req *TradeDatesReq, rsp *TradeDatesRsp) (ret Error, err error)
	TradeDateInterval(ksfCtx context.Context, req *TradeDateIntervalReq, rsp *TradeDateIntervalRsp) (ret Error, err error)
	PrevTradeDates(ksfCtx context.Context, req *PrevTradeDatesReq, rsp *PrevTradeDatesRsp) (ret Error, err error)
	NextTradeDates(ksfCtx context.Context, req *NextTradeDatesReq, rsp *NextTradeDatesRsp) (ret Error, err error)
	LastTradeDate(ksfCtx context.Context, req *LastTradeDateReq, rsp *LastTradeDateRsp) (ret Error, err error)
	NextTradeDate(ksfCtx context.Context, req *NextTradeDateReq, rsp *NextTradeDateRsp) (ret Error, err error)
	IsTradeDate(ksfCtx context.Context, req *IsTradeDateReq, rsp *IsTradeDateRsp) (ret Error, err error)
	IsTradeTime(ksfCtx context.Context, req *IsTradeTimeReq, rsp *IsTradeTimeRsp) (ret Error, err error)
	GetTradeDate(ksfCtx context.Context, req *GetTradeDateReq, rsp *GetTradeDateRsp) (ret Error, err error)
	NextCloseMs(ksfCtx context.Context, req *NextCloseMsReq, rsp *NextCloseMsRsp) (ret Error, err error)
	NextStartMs(ksfCtx context.Context, req *NextStartMsReq, rsp *NextStartMsRsp) (ret Error, err error)
	GetInstrument(ksfCtx context.Context, req *GetInstrumentReq, rsp *GetInstrumentRsp) (ret Error, err error)
	GetCfInstrument(ksfCtx context.Context, req *GetCfInstrumentReq, rsp *GetCfInstrumentRsp) (ret Error, err error)
	GetPrdInstrument(ksfCtx context.Context, req *GetPrdInstrumentReq, rsp *GetPrdInstrumentRsp) (ret Error, err error)
	GetInstPrdId(ksfCtx context.Context, req *GetInstPrdIdReq, rsp *GetInstPrdIdRsp) (ret Error, err error)
	IsSuspend(ksfCtx context.Context, req *IsSuspendReq, rsp *IsSuspendRsp) (ret Error, err error)
	IsST(ksfCtx context.Context, req *IsSTReq, rsp *IsSTRsp) (ret Error, err error)
	IsListed(ksfCtx context.Context, req *IsListedReq, rsp *IsListedRsp) (ret Error, err error)
	GetContinuousInstrument(ksfCtx context.Context, req *GetContinuousInstrumentReq, rsp *GetContinuousInstrumentRsp) (ret Error, err error)
	GetConstituentInstruments(ksfCtx context.Context, req *GetConstituentInstrumentsReq, rsp *GetConstituentInstrumentsRsp) (ret Error, err error)
	GetAppointedInstruments(ksfCtx context.Context, req *GetAppointedInstrumentsReq, rsp *GetAppointedInstrumentsRsp) (ret Error, err error)
	IsPrd(ksfCtx context.Context, req *IsPrdReq, rsp *IsPrdRsp) (ret Error, err error)
	IsCf(ksfCtx context.Context, req *IsCfReq, rsp *IsCfRsp) (ret Error, err error)
	IsMarket(ksfCtx context.Context, req *IsMarketReq, rsp *IsMarketRsp) (ret Error, err error)
	GetSWIndexInstrument(ksfCtx context.Context, req *GetSWIndexInstrumentReq, rsp *GetSWIndexInstrumentRsp) (ret Error, err error)

	DoClose(ctx context.Context)
}

// Dispatch is used to call the server side implement for the method defined in the ksf file. withContext shows using context or not.
func (obj *ArchiveObj) Dispatch(ksfCtx context.Context, val interface{}, ksfReq *requestf.RequestPacket, ksfResp *requestf.ResponsePacket, withContext bool) (err error) {
	var (
		length int32
		have   bool
		ty     byte
	)
	readBuf := codec.NewReader(tools.Int8ToByte(ksfReq.SBuffer))
	buf := codec.NewBuffer()
	switch ksfReq.SFuncName {
	case "StartAsyncLoadAllData":
		var req StartAsyncLoadAllDataReq

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "StartAsyncLoadAllData", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.StartAsyncLoadAllData(&req)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.StartAsyncLoadAllData(ksfCtx, &req)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "StartAsyncLoadAllData", 0, traceParam, "")
		}

	case "StopAsyncLoadAllData":

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "StopAsyncLoadAllData", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.StopAsyncLoadAllData()
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.StopAsyncLoadAllData(ksfCtx)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "StopAsyncLoadAllData", 0, traceParam, "")
		}

	case "GetQuoteTickPack":
		var req GetQuoteTickPackReq
		var rsp GetQuotePackRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetQuoteTickPack", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetQuoteTickPack(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetQuoteTickPack(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetQuoteTickPack", 0, traceParam, "")
		}

	case "GetQuoteBarPack":
		var req GetQuoteBarPackReq
		var rsp GetQuotePackRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetQuoteBarPack", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetQuoteBarPack(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetQuoteBarPack(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetQuoteBarPack", 0, traceParam, "")
		}

	case "GetQuoteDailyStaticPack":
		var req GetQuoteDailyStaticReq
		var rsp GetQuotePackRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetQuoteDailyStaticPack", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetQuoteDailyStaticPack(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetQuoteDailyStaticPack(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetQuoteDailyStaticPack", 0, traceParam, "")
		}

	case "GetBasicPack":
		var req GetBasicPackReq
		var rsp GetBasicPackRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetBasicPack", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetBasicPack(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetBasicPack(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetBasicPack", 0, traceParam, "")
		}

	case "GetBifrostBinlog":
		var req GetBifrostBinlogReq
		var rsp GetBifrostBinlogRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetBifrostBinlog", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetBifrostBinlog(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetBifrostBinlog(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetBifrostBinlog", 0, traceParam, "")
		}

	case "QuoteChMerge":
		var req QuoteChMergeReq

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "QuoteChMerge", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.QuoteChMerge(&req)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.QuoteChMerge(ksfCtx, &req)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "QuoteChMerge", 0, traceParam, "")
		}

	case "NotifyMonitorInfo":
		var req NotifyMonitorInfoReq

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NotifyMonitorInfo", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.NotifyMonitorInfo(&req)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.NotifyMonitorInfo(ksfCtx, &req)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NotifyMonitorInfo", 0, traceParam, "")
		}

	case "NotifyPredilectionInfo":
		var req NotifyPredilectionInfoReq

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NotifyPredilectionInfo", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.NotifyPredilectionInfo(&req)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.NotifyPredilectionInfo(ksfCtx, &req)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NotifyPredilectionInfo", 0, traceParam, "")
		}

	case "GetBar":
		var req GetBarReq
		var rsp GetBarRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetBar", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetBar(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetBar(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetBar", 0, traceParam, "")
		}

	case "GetTick":
		var req GetTickReq
		var rsp GetTickRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetTick", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetTick(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetTick(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetTick", 0, traceParam, "")
		}

	case "GetCurInstruments":
		var rsp GetCurInstrumentsRsp

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetCurInstruments", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetCurInstruments(&rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetCurInstruments(ksfCtx, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 1)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetCurInstruments", 0, traceParam, "")
		}

	case "GetHisInstruments":
		var rsp GetHisInstrumentsRsp

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetHisInstruments", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetHisInstruments(&rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetHisInstruments(ksfCtx, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 1)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetHisInstruments", 0, traceParam, "")
		}

	case "GetRefMarkets":
		var req GetRefMarketsReq
		var rsp GetRefMarketsRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetRefMarkets", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetRefMarkets(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetRefMarkets(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetRefMarkets", 0, traceParam, "")
		}

	case "GetInstrumentMarket":
		var req GetInstrumentMarketReq
		var rsp GetInstrumentMarketRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstrumentMarket", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetInstrumentMarket(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetInstrumentMarket(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstrumentMarket", 0, traceParam, "")
		}

	case "GetExchangeId":
		var req GetExchangeIdReq
		var rsp GetExchangeIdRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetExchangeId", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetExchangeId(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetExchangeId(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetExchangeId", 0, traceParam, "")
		}

	case "GetInstVolMulti":
		var req GetInstVolMultiReq
		var rsp GetInstVolMultiRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstVolMulti", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetInstVolMulti(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetInstVolMulti(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstVolMulti", 0, traceParam, "")
		}

	case "GetTradingMarkets":
		var req GetTradingMarketsReq
		var rsp GetTradingMarketsRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetTradingMarkets", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetTradingMarkets(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetTradingMarkets(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetTradingMarkets", 0, traceParam, "")
		}

	case "TradeDates":
		var req TradeDatesReq
		var rsp TradeDatesRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "TradeDates", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.TradeDates(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.TradeDates(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "TradeDates", 0, traceParam, "")
		}

	case "TradeDateInterval":
		var req TradeDateIntervalReq
		var rsp TradeDateIntervalRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "TradeDateInterval", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.TradeDateInterval(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.TradeDateInterval(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "TradeDateInterval", 0, traceParam, "")
		}

	case "PrevTradeDates":
		var req PrevTradeDatesReq
		var rsp PrevTradeDatesRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "PrevTradeDates", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.PrevTradeDates(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.PrevTradeDates(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "PrevTradeDates", 0, traceParam, "")
		}

	case "NextTradeDates":
		var req NextTradeDatesReq
		var rsp NextTradeDatesRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextTradeDates", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.NextTradeDates(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.NextTradeDates(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextTradeDates", 0, traceParam, "")
		}

	case "LastTradeDate":
		var req LastTradeDateReq
		var rsp LastTradeDateRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "LastTradeDate", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.LastTradeDate(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.LastTradeDate(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "LastTradeDate", 0, traceParam, "")
		}

	case "NextTradeDate":
		var req NextTradeDateReq
		var rsp NextTradeDateRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextTradeDate", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.NextTradeDate(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.NextTradeDate(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextTradeDate", 0, traceParam, "")
		}

	case "IsTradeDate":
		var req IsTradeDateReq
		var rsp IsTradeDateRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsTradeDate", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsTradeDate(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsTradeDate(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsTradeDate", 0, traceParam, "")
		}

	case "IsTradeTime":
		var req IsTradeTimeReq
		var rsp IsTradeTimeRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsTradeTime", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsTradeTime(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsTradeTime(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsTradeTime", 0, traceParam, "")
		}

	case "GetTradeDate":
		var req GetTradeDateReq
		var rsp GetTradeDateRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetTradeDate", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetTradeDate(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetTradeDate(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetTradeDate", 0, traceParam, "")
		}

	case "NextCloseMs":
		var req NextCloseMsReq
		var rsp NextCloseMsRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextCloseMs", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.NextCloseMs(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.NextCloseMs(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextCloseMs", 0, traceParam, "")
		}

	case "NextStartMs":
		var req NextStartMsReq
		var rsp NextStartMsRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextStartMs", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.NextStartMs(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.NextStartMs(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "NextStartMs", 0, traceParam, "")
		}

	case "GetInstrument":
		var req GetInstrumentReq
		var rsp GetInstrumentRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstrument", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetInstrument(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetInstrument(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstrument", 0, traceParam, "")
		}

	case "GetCfInstrument":
		var req GetCfInstrumentReq
		var rsp GetCfInstrumentRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetCfInstrument", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetCfInstrument(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetCfInstrument(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetCfInstrument", 0, traceParam, "")
		}

	case "GetPrdInstrument":
		var req GetPrdInstrumentReq
		var rsp GetPrdInstrumentRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetPrdInstrument", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetPrdInstrument(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetPrdInstrument(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetPrdInstrument", 0, traceParam, "")
		}

	case "GetInstPrdId":
		var req GetInstPrdIdReq
		var rsp GetInstPrdIdRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstPrdId", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetInstPrdId(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetInstPrdId(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetInstPrdId", 0, traceParam, "")
		}

	case "IsSuspend":
		var req IsSuspendReq
		var rsp IsSuspendRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsSuspend", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsSuspend(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsSuspend(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsSuspend", 0, traceParam, "")
		}

	case "IsST":
		var req IsSTReq
		var rsp IsSTRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsST", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsST(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsST(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsST", 0, traceParam, "")
		}

	case "IsListed":
		var req IsListedReq
		var rsp IsListedRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsListed", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsListed(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsListed(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsListed", 0, traceParam, "")
		}

	case "GetContinuousInstrument":
		var req GetContinuousInstrumentReq
		var rsp GetContinuousInstrumentRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetContinuousInstrument", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetContinuousInstrument(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetContinuousInstrument(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetContinuousInstrument", 0, traceParam, "")
		}

	case "GetConstituentInstruments":
		var req GetConstituentInstrumentsReq
		var rsp GetConstituentInstrumentsRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetConstituentInstruments", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetConstituentInstruments(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetConstituentInstruments(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetConstituentInstruments", 0, traceParam, "")
		}

	case "GetAppointedInstruments":
		var req GetAppointedInstrumentsReq
		var rsp GetAppointedInstrumentsRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetAppointedInstruments", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetAppointedInstruments(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetAppointedInstruments(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetAppointedInstruments", 0, traceParam, "")
		}

	case "IsPrd":
		var req IsPrdReq
		var rsp IsPrdRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsPrd", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsPrd(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsPrd(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsPrd", 0, traceParam, "")
		}

	case "IsCf":
		var req IsCfReq
		var rsp IsCfRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsCf", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsCf(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsCf(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsCf", 0, traceParam, "")
		}

	case "IsMarket":
		var req IsMarketReq
		var rsp IsMarketRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsMarket", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.IsMarket(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.IsMarket(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "IsMarket", 0, traceParam, "")
		}

	case "GetSWIndexInstrument":
		var req GetSWIndexInstrumentReq
		var rsp GetSWIndexInstrumentRsp

		if ksfReq.IVersion == basef.KSFVERSION {

			err = req.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			reqKup := kup.NewUniAttribute()
			reqKup.Decode(readBuf)

			var kupBuffer []byte

			reqKup.GetBuffer("req", &kupBuffer)
			readBuf.Reset(kupBuffer)
			err = req.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.JSONVERSION {
			var jsonData map[string]interface{}
			decoder := json.NewDecoder(bytes.NewReader(readBuf.ToBytes()))
			decoder.UseNumber()
			err = decoder.Decode(&jsonData)
			if err != nil {
				return fmt.Errorf("decode reqpacket failed, error: %+v", err)
			}
			{
				jsonStr, _ := json.Marshal(jsonData["req"])
				req.ResetDefault()
				if err = json.Unmarshal(jsonStr, &req); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("decode reqpacket fail, error version: %d", ksfReq.IVersion)
			return err
		}

		traceData, ok := current.GetTraceData(ksfCtx)
		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSR, uint(readBuf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value["req"] = req
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSR), trace.TraceAnnotationSR, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetSWIndexInstrument", 0, traceParam, "")
		}

		var funRet Error
		if !withContext {
			imp := val.(ArchiveObjServant)
			funRet, err = imp.GetSWIndexInstrument(&req, &rsp)
		} else {
			imp := val.(ArchiveObjServantWithContext)
			funRet, err = imp.GetSWIndexInstrument(ksfCtx, &req, &rsp)
		}

		if err != nil {
			return err
		}

		if ksfReq.IVersion == basef.KSFVERSION {
			buf.Reset()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			err = rsp.WriteBlock(buf, 2)
			if err != nil {
				return err
			}

		} else if ksfReq.IVersion == basef.KUPVERSION {
			rspKup := kup.NewUniAttribute()

			err = funRet.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("", buf.ToBytes())
			rspKup.PutBuffer("ksf_ret", buf.ToBytes())

			buf.Reset()
			err = rsp.WriteBlock(buf, 0)
			if err != nil {
				return err
			}

			rspKup.PutBuffer("rsp", buf.ToBytes())

			buf.Reset()
			err = rspKup.Encode(buf)
			if err != nil {
				return err
			}
		} else if ksfReq.IVersion == basef.JSONVERSION {
			rspJson := map[string]interface{}{}
			rspJson["ksf_ret"] = funRet
			rspJson["rsp"] = rsp

			var rspByte []byte
			if rspByte, err = json.Marshal(rspJson); err != nil {
				return err
			}

			buf.Reset()
			err = buf.WriteSliceUint8(rspByte)
			if err != nil {
				return err
			}
		}

		if ok && traceData.TraceCall {
			var traceParam string
			traceParamFlag := traceData.NeedTraceParam(trace.EstSS, uint(buf.Len()))
			if traceParamFlag == trace.EnpNormal {
				value := map[string]interface{}{}
				value[""] = funRet
				value["rsp"] = rsp
				p, _ := json.Marshal(value)
				traceParam = string(p)
			} else if traceParamFlag == trace.EnpOverMaxLen {
				traceParam = "{\"trace_param_over_max_len\":true}"
			}
			ksf.Trace(traceData.GetTraceKey(trace.EstSS), trace.TraceAnnotationSS, ksf.GetClientConfig().ModuleName, ksfReq.SServantName, "GetSWIndexInstrument", 0, traceParam, "")
		}

	default:
		if ksfReq.SFuncName == "DoClose" {
			if withContext {
				imp := val.(ArchiveObjServantWithContext)
				imp.DoClose(ksfCtx)
			}
			return nil
		}
		return fmt.Errorf("func mismatch")
	}
	var statusMap map[string]string
	if status, ok := current.GetResponseStatus(ksfCtx); ok && status != nil {
		statusMap = status
	}
	var contextMap map[string]string
	if ctx, ok := current.GetResponseContext(ksfCtx); ok && ctx != nil {
		contextMap = ctx
	}
	*ksfResp = requestf.ResponsePacket{
		IVersion:     ksfReq.IVersion,
		CPacketType:  0,
		IRequestId:   ksfReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(buf.ToBytes()),
		Status:       statusMap,
		SResultDesc:  "",
		Context:      contextMap,
	}

	_ = readBuf
	_ = buf
	_ = length
	_ = have
	_ = ty
	return nil
}

type ArchiveObjKsfCallback interface {
	StartAsyncLoadAllData_Callback(ret *Error, opt ...map[string]string)
	StartAsyncLoadAllData_ExceptionCallback(err error)
	StopAsyncLoadAllData_Callback(ret *Error, opt ...map[string]string)
	StopAsyncLoadAllData_ExceptionCallback(err error)
	GetQuoteTickPack_Callback(ret *Error, rsp *GetQuotePackRsp, opt ...map[string]string)
	GetQuoteTickPack_ExceptionCallback(err error)
	GetQuoteBarPack_Callback(ret *Error, rsp *GetQuotePackRsp, opt ...map[string]string)
	GetQuoteBarPack_ExceptionCallback(err error)
	GetQuoteDailyStaticPack_Callback(ret *Error, rsp *GetQuotePackRsp, opt ...map[string]string)
	GetQuoteDailyStaticPack_ExceptionCallback(err error)
	GetBasicPack_Callback(ret *Error, rsp *GetBasicPackRsp, opt ...map[string]string)
	GetBasicPack_ExceptionCallback(err error)
	GetBifrostBinlog_Callback(ret *Error, rsp *GetBifrostBinlogRsp, opt ...map[string]string)
	GetBifrostBinlog_ExceptionCallback(err error)
	QuoteChMerge_Callback(ret *Error, opt ...map[string]string)
	QuoteChMerge_ExceptionCallback(err error)
	NotifyMonitorInfo_Callback(ret *Error, opt ...map[string]string)
	NotifyMonitorInfo_ExceptionCallback(err error)
	NotifyPredilectionInfo_Callback(ret *Error, opt ...map[string]string)
	NotifyPredilectionInfo_ExceptionCallback(err error)
	GetBar_Callback(ret *Error, rsp *GetBarRsp, opt ...map[string]string)
	GetBar_ExceptionCallback(err error)
	GetTick_Callback(ret *Error, rsp *GetTickRsp, opt ...map[string]string)
	GetTick_ExceptionCallback(err error)
	GetCurInstruments_Callback(ret *Error, rsp *GetCurInstrumentsRsp, opt ...map[string]string)
	GetCurInstruments_ExceptionCallback(err error)
	GetHisInstruments_Callback(ret *Error, rsp *GetHisInstrumentsRsp, opt ...map[string]string)
	GetHisInstruments_ExceptionCallback(err error)
	GetRefMarkets_Callback(ret *Error, rsp *GetRefMarketsRsp, opt ...map[string]string)
	GetRefMarkets_ExceptionCallback(err error)
	GetInstrumentMarket_Callback(ret *Error, rsp *GetInstrumentMarketRsp, opt ...map[string]string)
	GetInstrumentMarket_ExceptionCallback(err error)
	GetExchangeId_Callback(ret *Error, rsp *GetExchangeIdRsp, opt ...map[string]string)
	GetExchangeId_ExceptionCallback(err error)
	GetInstVolMulti_Callback(ret *Error, rsp *GetInstVolMultiRsp, opt ...map[string]string)
	GetInstVolMulti_ExceptionCallback(err error)
	GetTradingMarkets_Callback(ret *Error, rsp *GetTradingMarketsRsp, opt ...map[string]string)
	GetTradingMarkets_ExceptionCallback(err error)
	TradeDates_Callback(ret *Error, rsp *TradeDatesRsp, opt ...map[string]string)
	TradeDates_ExceptionCallback(err error)
	TradeDateInterval_Callback(ret *Error, rsp *TradeDateIntervalRsp, opt ...map[string]string)
	TradeDateInterval_ExceptionCallback(err error)
	PrevTradeDates_Callback(ret *Error, rsp *PrevTradeDatesRsp, opt ...map[string]string)
	PrevTradeDates_ExceptionCallback(err error)
	NextTradeDates_Callback(ret *Error, rsp *NextTradeDatesRsp, opt ...map[string]string)
	NextTradeDates_ExceptionCallback(err error)
	LastTradeDate_Callback(ret *Error, rsp *LastTradeDateRsp, opt ...map[string]string)
	LastTradeDate_ExceptionCallback(err error)
	NextTradeDate_Callback(ret *Error, rsp *NextTradeDateRsp, opt ...map[string]string)
	NextTradeDate_ExceptionCallback(err error)
	IsTradeDate_Callback(ret *Error, rsp *IsTradeDateRsp, opt ...map[string]string)
	IsTradeDate_ExceptionCallback(err error)
	IsTradeTime_Callback(ret *Error, rsp *IsTradeTimeRsp, opt ...map[string]string)
	IsTradeTime_ExceptionCallback(err error)
	GetTradeDate_Callback(ret *Error, rsp *GetTradeDateRsp, opt ...map[string]string)
	GetTradeDate_ExceptionCallback(err error)
	NextCloseMs_Callback(ret *Error, rsp *NextCloseMsRsp, opt ...map[string]string)
	NextCloseMs_ExceptionCallback(err error)
	NextStartMs_Callback(ret *Error, rsp *NextStartMsRsp, opt ...map[string]string)
	NextStartMs_ExceptionCallback(err error)
	GetInstrument_Callback(ret *Error, rsp *GetInstrumentRsp, opt ...map[string]string)
	GetInstrument_ExceptionCallback(err error)
	GetCfInstrument_Callback(ret *Error, rsp *GetCfInstrumentRsp, opt ...map[string]string)
	GetCfInstrument_ExceptionCallback(err error)
	GetPrdInstrument_Callback(ret *Error, rsp *GetPrdInstrumentRsp, opt ...map[string]string)
	GetPrdInstrument_ExceptionCallback(err error)
	GetInstPrdId_Callback(ret *Error, rsp *GetInstPrdIdRsp, opt ...map[string]string)
	GetInstPrdId_ExceptionCallback(err error)
	IsSuspend_Callback(ret *Error, rsp *IsSuspendRsp, opt ...map[string]string)
	IsSuspend_ExceptionCallback(err error)
	IsST_Callback(ret *Error, rsp *IsSTRsp, opt ...map[string]string)
	IsST_ExceptionCallback(err error)
	IsListed_Callback(ret *Error, rsp *IsListedRsp, opt ...map[string]string)
	IsListed_ExceptionCallback(err error)
	GetContinuousInstrument_Callback(ret *Error, rsp *GetContinuousInstrumentRsp, opt ...map[string]string)
	GetContinuousInstrument_ExceptionCallback(err error)
	GetConstituentInstruments_Callback(ret *Error, rsp *GetConstituentInstrumentsRsp, opt ...map[string]string)
	GetConstituentInstruments_ExceptionCallback(err error)
	GetAppointedInstruments_Callback(ret *Error, rsp *GetAppointedInstrumentsRsp, opt ...map[string]string)
	GetAppointedInstruments_ExceptionCallback(err error)
	IsPrd_Callback(ret *Error, rsp *IsPrdRsp, opt ...map[string]string)
	IsPrd_ExceptionCallback(err error)
	IsCf_Callback(ret *Error, rsp *IsCfRsp, opt ...map[string]string)
	IsCf_ExceptionCallback(err error)
	IsMarket_Callback(ret *Error, rsp *IsMarketRsp, opt ...map[string]string)
	IsMarket_ExceptionCallback(err error)
	GetSWIndexInstrument_Callback(ret *Error, rsp *GetSWIndexInstrumentRsp, opt ...map[string]string)
	GetSWIndexInstrument_ExceptionCallback(err error)
}

// ArchiveObjPushCallback struct
type ArchiveObjPushCallback struct {
	Cb ArchiveObjKsfCallback
}

func (cb *ArchiveObjPushCallback) Ondispatch(ksfResp *requestf.ResponsePacket) {
	switch ksfResp.SResultDesc {
	case "StartAsyncLoadAllData":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.StartAsyncLoadAllData_Callback(&ret, ksfResp.Context)
				return nil
			} else {
				cb.Cb.StartAsyncLoadAllData_Callback(&ret)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.StartAsyncLoadAllData_ExceptionCallback(err)
		}
	case "StopAsyncLoadAllData":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.StopAsyncLoadAllData_Callback(&ret, ksfResp.Context)
				return nil
			} else {
				cb.Cb.StopAsyncLoadAllData_Callback(&ret)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.StopAsyncLoadAllData_ExceptionCallback(err)
		}
	case "GetQuoteTickPack":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetQuotePackRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetQuoteTickPack_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetQuoteTickPack_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetQuoteTickPack_ExceptionCallback(err)
		}
	case "GetQuoteBarPack":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetQuotePackRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetQuoteBarPack_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetQuoteBarPack_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetQuoteBarPack_ExceptionCallback(err)
		}
	case "GetQuoteDailyStaticPack":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetQuotePackRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetQuoteDailyStaticPack_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetQuoteDailyStaticPack_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetQuoteDailyStaticPack_ExceptionCallback(err)
		}
	case "GetBasicPack":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetBasicPackRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetBasicPack_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetBasicPack_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetBasicPack_ExceptionCallback(err)
		}
	case "GetBifrostBinlog":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetBifrostBinlogRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetBifrostBinlog_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetBifrostBinlog_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetBifrostBinlog_ExceptionCallback(err)
		}
	case "QuoteChMerge":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.QuoteChMerge_Callback(&ret, ksfResp.Context)
				return nil
			} else {
				cb.Cb.QuoteChMerge_Callback(&ret)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.QuoteChMerge_ExceptionCallback(err)
		}
	case "NotifyMonitorInfo":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.NotifyMonitorInfo_Callback(&ret, ksfResp.Context)
				return nil
			} else {
				cb.Cb.NotifyMonitorInfo_Callback(&ret)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.NotifyMonitorInfo_ExceptionCallback(err)
		}
	case "NotifyPredilectionInfo":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.NotifyPredilectionInfo_Callback(&ret, ksfResp.Context)
				return nil
			} else {
				cb.Cb.NotifyPredilectionInfo_Callback(&ret)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.NotifyPredilectionInfo_ExceptionCallback(err)
		}
	case "GetBar":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetBarRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetBar_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetBar_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetBar_ExceptionCallback(err)
		}
	case "GetTick":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetTickRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetTick_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetTick_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetTick_ExceptionCallback(err)
		}
	case "GetCurInstruments":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetCurInstrumentsRsp

			err = rsp.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetCurInstruments_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetCurInstruments_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetCurInstruments_ExceptionCallback(err)
		}
	case "GetHisInstruments":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetHisInstrumentsRsp

			err = rsp.ReadBlock(readBuf, 1, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetHisInstruments_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetHisInstruments_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetHisInstruments_ExceptionCallback(err)
		}
	case "GetRefMarkets":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetRefMarketsRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetRefMarkets_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetRefMarkets_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetRefMarkets_ExceptionCallback(err)
		}
	case "GetInstrumentMarket":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetInstrumentMarketRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetInstrumentMarket_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetInstrumentMarket_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetInstrumentMarket_ExceptionCallback(err)
		}
	case "GetExchangeId":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetExchangeIdRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetExchangeId_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetExchangeId_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetExchangeId_ExceptionCallback(err)
		}
	case "GetInstVolMulti":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetInstVolMultiRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetInstVolMulti_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetInstVolMulti_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetInstVolMulti_ExceptionCallback(err)
		}
	case "GetTradingMarkets":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetTradingMarketsRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetTradingMarkets_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetTradingMarkets_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetTradingMarkets_ExceptionCallback(err)
		}
	case "TradeDates":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp TradeDatesRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.TradeDates_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.TradeDates_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.TradeDates_ExceptionCallback(err)
		}
	case "TradeDateInterval":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp TradeDateIntervalRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.TradeDateInterval_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.TradeDateInterval_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.TradeDateInterval_ExceptionCallback(err)
		}
	case "PrevTradeDates":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp PrevTradeDatesRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.PrevTradeDates_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.PrevTradeDates_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.PrevTradeDates_ExceptionCallback(err)
		}
	case "NextTradeDates":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp NextTradeDatesRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.NextTradeDates_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.NextTradeDates_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.NextTradeDates_ExceptionCallback(err)
		}
	case "LastTradeDate":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp LastTradeDateRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.LastTradeDate_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.LastTradeDate_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.LastTradeDate_ExceptionCallback(err)
		}
	case "NextTradeDate":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp NextTradeDateRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.NextTradeDate_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.NextTradeDate_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.NextTradeDate_ExceptionCallback(err)
		}
	case "IsTradeDate":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsTradeDateRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsTradeDate_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsTradeDate_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsTradeDate_ExceptionCallback(err)
		}
	case "IsTradeTime":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsTradeTimeRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsTradeTime_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsTradeTime_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsTradeTime_ExceptionCallback(err)
		}
	case "GetTradeDate":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetTradeDateRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetTradeDate_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetTradeDate_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetTradeDate_ExceptionCallback(err)
		}
	case "NextCloseMs":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp NextCloseMsRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.NextCloseMs_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.NextCloseMs_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.NextCloseMs_ExceptionCallback(err)
		}
	case "NextStartMs":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp NextStartMsRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.NextStartMs_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.NextStartMs_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.NextStartMs_ExceptionCallback(err)
		}
	case "GetInstrument":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetInstrumentRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetInstrument_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetInstrument_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetInstrument_ExceptionCallback(err)
		}
	case "GetCfInstrument":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetCfInstrumentRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetCfInstrument_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetCfInstrument_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetCfInstrument_ExceptionCallback(err)
		}
	case "GetPrdInstrument":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetPrdInstrumentRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetPrdInstrument_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetPrdInstrument_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetPrdInstrument_ExceptionCallback(err)
		}
	case "GetInstPrdId":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetInstPrdIdRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetInstPrdId_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetInstPrdId_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetInstPrdId_ExceptionCallback(err)
		}
	case "IsSuspend":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsSuspendRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsSuspend_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsSuspend_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsSuspend_ExceptionCallback(err)
		}
	case "IsST":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsSTRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsST_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsST_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsST_ExceptionCallback(err)
		}
	case "IsListed":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsListedRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsListed_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsListed_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsListed_ExceptionCallback(err)
		}
	case "GetContinuousInstrument":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetContinuousInstrumentRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetContinuousInstrument_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetContinuousInstrument_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetContinuousInstrument_ExceptionCallback(err)
		}
	case "GetConstituentInstruments":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetConstituentInstrumentsRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetConstituentInstruments_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetConstituentInstruments_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetConstituentInstruments_ExceptionCallback(err)
		}
	case "GetAppointedInstruments":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetAppointedInstrumentsRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetAppointedInstruments_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetAppointedInstruments_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetAppointedInstruments_ExceptionCallback(err)
		}
	case "IsPrd":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsPrdRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsPrd_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsPrd_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsPrd_ExceptionCallback(err)
		}
	case "IsCf":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsCfRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsCf_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsCf_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsCf_ExceptionCallback(err)
		}
	case "IsMarket":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp IsMarketRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.IsMarket_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.IsMarket_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.IsMarket_ExceptionCallback(err)
		}
	case "GetSWIndexInstrument":
		err := func() error {
			var (
				length int32
				have   bool
				ty     byte
			)
			var err error
			readBuf := codec.NewReader(tools.Int8ToByte(ksfResp.SBuffer))
			var ret Error
			err = ret.ReadBlock(readBuf, 0, true)
			if err != nil {
				return err
			}

			var rsp GetSWIndexInstrumentRsp

			err = rsp.ReadBlock(readBuf, 2, true)
			if err != nil {
				return err
			}

			_ = length
			_ = have
			_ = ty
			if ksfResp.Context != nil {
				cb.Cb.GetSWIndexInstrument_Callback(&ret, &rsp, ksfResp.Context)
				return nil
			} else {
				cb.Cb.GetSWIndexInstrument_Callback(&ret, &rsp)
				return nil
			}
		}()
		if err != nil {
			cb.Cb.GetSWIndexInstrument_ExceptionCallback(err)
		}
	}
}
func (obj *ArchiveObj) AsyncSendResponse_StartAsyncLoadAllData(ctx context.Context, ret Error, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "StartAsyncLoadAllData"
	resp.SResultDesc = "StartAsyncLoadAllData"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_StopAsyncLoadAllData(ctx context.Context, ret Error, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "StopAsyncLoadAllData"
	resp.SResultDesc = "StopAsyncLoadAllData"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetQuoteTickPack(ctx context.Context, ret Error, rsp *GetQuotePackRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetQuoteTickPack"
	resp.SResultDesc = "GetQuoteTickPack"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetQuoteBarPack(ctx context.Context, ret Error, rsp *GetQuotePackRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetQuoteBarPack"
	resp.SResultDesc = "GetQuoteBarPack"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetQuoteDailyStaticPack(ctx context.Context, ret Error, rsp *GetQuotePackRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetQuoteDailyStaticPack"
	resp.SResultDesc = "GetQuoteDailyStaticPack"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetBasicPack(ctx context.Context, ret Error, rsp *GetBasicPackRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetBasicPack"
	resp.SResultDesc = "GetBasicPack"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetBifrostBinlog(ctx context.Context, ret Error, rsp *GetBifrostBinlogRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetBifrostBinlog"
	resp.SResultDesc = "GetBifrostBinlog"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_QuoteChMerge(ctx context.Context, ret Error, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "QuoteChMerge"
	resp.SResultDesc = "QuoteChMerge"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_NotifyMonitorInfo(ctx context.Context, ret Error, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "NotifyMonitorInfo"
	resp.SResultDesc = "NotifyMonitorInfo"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_NotifyPredilectionInfo(ctx context.Context, ret Error, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "NotifyPredilectionInfo"
	resp.SResultDesc = "NotifyPredilectionInfo"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetBar(ctx context.Context, ret Error, rsp *GetBarRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetBar"
	resp.SResultDesc = "GetBar"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetTick(ctx context.Context, ret Error, rsp *GetTickRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetTick"
	resp.SResultDesc = "GetTick"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetCurInstruments(ctx context.Context, ret Error, rsp *GetCurInstrumentsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetCurInstruments"
	resp.SResultDesc = "GetCurInstruments"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetHisInstruments(ctx context.Context, ret Error, rsp *GetHisInstrumentsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 1)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetHisInstruments"
	resp.SResultDesc = "GetHisInstruments"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetRefMarkets(ctx context.Context, ret Error, rsp *GetRefMarketsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetRefMarkets"
	resp.SResultDesc = "GetRefMarkets"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetInstrumentMarket(ctx context.Context, ret Error, rsp *GetInstrumentMarketRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetInstrumentMarket"
	resp.SResultDesc = "GetInstrumentMarket"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetExchangeId(ctx context.Context, ret Error, rsp *GetExchangeIdRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetExchangeId"
	resp.SResultDesc = "GetExchangeId"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetInstVolMulti(ctx context.Context, ret Error, rsp *GetInstVolMultiRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetInstVolMulti"
	resp.SResultDesc = "GetInstVolMulti"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetTradingMarkets(ctx context.Context, ret Error, rsp *GetTradingMarketsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetTradingMarkets"
	resp.SResultDesc = "GetTradingMarkets"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_TradeDates(ctx context.Context, ret Error, rsp *TradeDatesRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "TradeDates"
	resp.SResultDesc = "TradeDates"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_TradeDateInterval(ctx context.Context, ret Error, rsp *TradeDateIntervalRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "TradeDateInterval"
	resp.SResultDesc = "TradeDateInterval"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_PrevTradeDates(ctx context.Context, ret Error, rsp *PrevTradeDatesRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "PrevTradeDates"
	resp.SResultDesc = "PrevTradeDates"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_NextTradeDates(ctx context.Context, ret Error, rsp *NextTradeDatesRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "NextTradeDates"
	resp.SResultDesc = "NextTradeDates"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_LastTradeDate(ctx context.Context, ret Error, rsp *LastTradeDateRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "LastTradeDate"
	resp.SResultDesc = "LastTradeDate"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_NextTradeDate(ctx context.Context, ret Error, rsp *NextTradeDateRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "NextTradeDate"
	resp.SResultDesc = "NextTradeDate"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsTradeDate(ctx context.Context, ret Error, rsp *IsTradeDateRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsTradeDate"
	resp.SResultDesc = "IsTradeDate"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsTradeTime(ctx context.Context, ret Error, rsp *IsTradeTimeRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsTradeTime"
	resp.SResultDesc = "IsTradeTime"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetTradeDate(ctx context.Context, ret Error, rsp *GetTradeDateRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetTradeDate"
	resp.SResultDesc = "GetTradeDate"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_NextCloseMs(ctx context.Context, ret Error, rsp *NextCloseMsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "NextCloseMs"
	resp.SResultDesc = "NextCloseMs"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_NextStartMs(ctx context.Context, ret Error, rsp *NextStartMsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "NextStartMs"
	resp.SResultDesc = "NextStartMs"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetInstrument(ctx context.Context, ret Error, rsp *GetInstrumentRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetInstrument"
	resp.SResultDesc = "GetInstrument"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetCfInstrument(ctx context.Context, ret Error, rsp *GetCfInstrumentRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetCfInstrument"
	resp.SResultDesc = "GetCfInstrument"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetPrdInstrument(ctx context.Context, ret Error, rsp *GetPrdInstrumentRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetPrdInstrument"
	resp.SResultDesc = "GetPrdInstrument"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetInstPrdId(ctx context.Context, ret Error, rsp *GetInstPrdIdRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetInstPrdId"
	resp.SResultDesc = "GetInstPrdId"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsSuspend(ctx context.Context, ret Error, rsp *IsSuspendRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsSuspend"
	resp.SResultDesc = "IsSuspend"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsST(ctx context.Context, ret Error, rsp *IsSTRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsST"
	resp.SResultDesc = "IsST"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsListed(ctx context.Context, ret Error, rsp *IsListedRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsListed"
	resp.SResultDesc = "IsListed"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetContinuousInstrument(ctx context.Context, ret Error, rsp *GetContinuousInstrumentRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetContinuousInstrument"
	resp.SResultDesc = "GetContinuousInstrument"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetConstituentInstruments(ctx context.Context, ret Error, rsp *GetConstituentInstrumentsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetConstituentInstruments"
	resp.SResultDesc = "GetConstituentInstruments"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetAppointedInstruments(ctx context.Context, ret Error, rsp *GetAppointedInstrumentsRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetAppointedInstruments"
	resp.SResultDesc = "GetAppointedInstruments"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsPrd(ctx context.Context, ret Error, rsp *IsPrdRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsPrd"
	resp.SResultDesc = "IsPrd"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsCf(ctx context.Context, ret Error, rsp *IsCfRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsCf"
	resp.SResultDesc = "IsCf"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_IsMarket(ctx context.Context, ret Error, rsp *IsMarketRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "IsMarket"
	resp.SResultDesc = "IsMarket"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
func (obj *ArchiveObj) AsyncSendResponse_GetSWIndexInstrument(ctx context.Context, ret Error, rsp *GetSWIndexInstrumentRsp, opt ...map[string]string) (err error) {

	conn, udpAddr, ok := current.GetRawConn(ctx)
	if !ok {
		return fmt.Errorf("connection not found")
	}
	buf := codec.NewBuffer()

	err = ret.WriteBlock(buf, 0)
	if err != nil {
		return err
	}

	err = (*rsp).WriteBlock(buf, 2)
	if err != nil {
		return err
	}

	resp := &requestf.ResponsePacket{
		SBuffer: tools.ByteToInt8(buf.ToBytes()),
	}
	resp.IVersion = basef.KSFVERSION
	if resp.Status == nil {
		resp.Status = make(map[string]string)
	}
	resp.Status["KSF_FUNC"] = "GetSWIndexInstrument"
	resp.SResultDesc = "GetSWIndexInstrument"
	if len(opt) > 0 {
		if opt[0] != nil {
			resp.Context = opt[0]
		}
	}
	rspData := obj.rsp2Byte(resp)
	if udpAddr != nil {
		udpConn, _ := conn.(*net.UDPConn)
		_, err = udpConn.WriteToUDP(rspData, udpAddr)
	} else {
		_, err = conn.Write(rspData)
	}
	return err
}
