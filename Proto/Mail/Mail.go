// Package Mail comment
// This file was generated by ksf2go 1.3.20
// Generated from Mail.ksf
package Mail

import (
	"fmt"

	"go.k8sf.cloud/go/KsfGo/ksf/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// Req struct implement
type Req struct {
	Receiver_addrs []string `json:"receiver_addrs"`
	Sender_addr    string   `json:"sender_addr"`
	Token          string   `json:"token"`
	Smtp_host      string   `json:"smtp_host"`
	Smtp_port      int32    `json:"smtp_port"`
	Subject        string   `json:"subject"`
	Content        string   `json:"content"`
	Html           string   `json:"html"`
}

func (st *Req) ResetDefault() {
	st.Smtp_host = "smtp.exmail.qq.com"
	st.Smtp_port = 465
}

// ReadFrom reads  from readBuf and put into struct.
func (st *Req) ReadFrom(readBuf *codec.Reader) error {
	var (
		err    error
		length int32
		have   bool
		ty     byte
	)
	st.ResetDefault()

	have, ty, err = readBuf.SkipToNoCheck(0, false)
	if err != nil {
		return err
	}

	if have {
		if ty == codec.LIST {
			err = readBuf.ReadInt32(&length, 0, true)
			if err != nil {
				return err
			}

			st.Receiver_addrs = make([]string, length)
			for i0, e0 := int32(0), length; i0 < e0; i0++ {

				err = readBuf.ReadString(&st.Receiver_addrs[i0], 0, false)
				if err != nil {
					return err
				}

			}
		} else if ty == codec.SimpleList {
			err = fmt.Errorf("not support SimpleList type")
			if err != nil {
				return err
			}

		} else {
			err = fmt.Errorf("require vector, but not")
			if err != nil {
				return err
			}

		}
	}

	err = readBuf.ReadString(&st.Sender_addr, 1, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Token, 2, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Smtp_host, 3, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadInt32(&st.Smtp_port, 4, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Subject, 5, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Content, 6, false)
	if err != nil {
		return err
	}

	err = readBuf.ReadString(&st.Html, 7, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

// ReadBlock reads struct from the given tag , require or optional.
func (st *Req) ReadBlock(readBuf *codec.Reader, tag byte, require bool) error {
	var (
		err  error
		have bool
	)
	st.ResetDefault()

	have, err = readBuf.SkipTo(codec.StructBegin, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Req, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(readBuf)
	if err != nil {
		return err
	}

	err = readBuf.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

// WriteTo encode struct to buffer
func (st *Req) WriteTo(buf *codec.Buffer) (err error) {

	err = buf.WriteHead(codec.LIST, 0)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(int32(len(st.Receiver_addrs)), 0)
	if err != nil {
		return err
	}

	for _, v := range st.Receiver_addrs {

		err = buf.WriteString(v, 0)
		if err != nil {
			return err
		}

	}

	err = buf.WriteString(st.Sender_addr, 1)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Token, 2)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Smtp_host, 3)
	if err != nil {
		return err
	}

	err = buf.WriteInt32(st.Smtp_port, 4)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Subject, 5)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Content, 6)
	if err != nil {
		return err
	}

	err = buf.WriteString(st.Html, 7)
	if err != nil {
		return err
	}

	return err
}

// WriteBlock encode struct
func (st *Req) WriteBlock(buf *codec.Buffer, tag byte) error {
	var err error
	err = buf.WriteHead(codec.StructBegin, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(buf)
	if err != nil {
		return err
	}

	err = buf.WriteHead(codec.StructEnd, 0)
	if err != nil {
		return err
	}
	return nil
}
